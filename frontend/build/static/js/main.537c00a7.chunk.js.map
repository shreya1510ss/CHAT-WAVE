{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/languages.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","toggle","settoggle","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","languages","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","language","setlanguage","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Object","entries","map","code","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","alignItems","display","htmlFor","isChecked","ml","icon","View","isCentered","flexDir","boxSize","src","alt","base","md","ScrollableChat","translatedMessages","setTranslatedMessages","translateMessages","translateMessage","content","q","source","error","Promise","all","translated","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.537c00a7.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n  const [toggle, settoggle] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n        toggle,\r\n        settoggle,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","const languages = {\r\n  \"am-ET\": \"Amharic\",\r\n  \"ar-SA\": \"Arabic\",\r\n  \"be-BY\": \"Bielarus\",\r\n  \"bem-ZM\": \"Bemba\",\r\n  \"bi-VU\": \"Bislama\",\r\n  \"bjs-BB\": \"Bajan\",\r\n  \"bn-IN\": \"Bengali\",\r\n  \"bo-CN\": \"Tibetan\",\r\n  \"br-FR\": \"Breton\",\r\n  \"bs-BA\": \"Bosnian\",\r\n  \"ca-ES\": \"Catalan\",\r\n  \"cop-EG\": \"Coptic\",\r\n  \"cs-CZ\": \"Czech\",\r\n  \"cy-GB\": \"Welsh\",\r\n  \"da-DK\": \"Danish\",\r\n  \"dz-BT\": \"Dzongkha\",\r\n  \"de-DE\": \"German\",\r\n  \"dv-MV\": \"Maldivian\",\r\n  \"el-GR\": \"Greek\",\r\n  \"en-GB\": \"English\",\r\n  \"es-ES\": \"Spanish\",\r\n  \"et-EE\": \"Estonian\",\r\n  \"eu-ES\": \"Basque\",\r\n  \"fa-IR\": \"Persian\",\r\n  \"fi-FI\": \"Finnish\",\r\n  \"fn-FNG\": \"Fanagalo\",\r\n  \"fo-FO\": \"Faroese\",\r\n  \"fr-FR\": \"French\",\r\n  \"gl-ES\": \"Galician\",\r\n  \"gu-IN\": \"Gujarati\",\r\n  \"ha-NE\": \"Hausa\",\r\n  \"he-IL\": \"Hebrew\",\r\n  \"hi-IN\": \"Hindi\",\r\n  \"hr-HR\": \"Croatian\",\r\n  \"hu-HU\": \"Hungarian\",\r\n  \"id-ID\": \"Indonesian\",\r\n  \"is-IS\": \"Icelandic\",\r\n  \"it-IT\": \"Italian\",\r\n  \"ja-JP\": \"Japanese\",\r\n  \"kk-KZ\": \"Kazakh\",\r\n  \"km-KM\": \"Khmer\",\r\n  \"kn-IN\": \"Kannada\",\r\n  \"ko-KR\": \"Korean\",\r\n  \"ku-TR\": \"Kurdish\",\r\n  \"ky-KG\": \"Kyrgyz\",\r\n  \"la-VA\": \"Latin\",\r\n  \"lo-LA\": \"Lao\",\r\n  \"lv-LV\": \"Latvian\",\r\n  \"men-SL\": \"Mende\",\r\n  \"mg-MG\": \"Malagasy\",\r\n  \"mi-NZ\": \"Maori\",\r\n  \"ms-MY\": \"Malay\",\r\n  \"mt-MT\": \"Maltese\",\r\n  \"my-MM\": \"Burmese\",\r\n  \"ne-NP\": \"Nepali\",\r\n  \"niu-NU\": \"Niuean\",\r\n  \"nl-NL\": \"Dutch\",\r\n  \"no-NO\": \"Norwegian\",\r\n  \"ny-MW\": \"Nyanja\",\r\n  \"ur-PK\": \"Pakistani\",\r\n  \"pau-PW\": \"Palauan\",\r\n  \"pa-IN\": \"Panjabi\",\r\n  \"ps-PK\": \"Pashto\",\r\n  \"pis-SB\": \"Pijin\",\r\n  \"pl-PL\": \"Polish\",\r\n  \"pt-PT\": \"Portuguese\",\r\n  \"rn-BI\": \"Kirundi\",\r\n  \"ro-RO\": \"Romanian\",\r\n  \"ru-RU\": \"Russian\",\r\n  \"sg-CF\": \"Sango\",\r\n  \"si-LK\": \"Sinhala\",\r\n  \"sk-SK\": \"Slovak\",\r\n  \"sm-WS\": \"Samoan\",\r\n  \"sn-ZW\": \"Shona\",\r\n  \"so-SO\": \"Somali\",\r\n  \"sq-AL\": \"Albanian\",\r\n  \"sr-RS\": \"Serbian\",\r\n  \"sv-SE\": \"Swedish\",\r\n  \"sw-SZ\": \"Swahili\",\r\n  \"ta-LK\": \"Tamil\",\r\n  \"te-IN\": \"Telugu\",\r\n  \"tet-TL\": \"Tetum\",\r\n  \"tg-TJ\": \"Tajik\",\r\n  \"th-TH\": \"Thai\",\r\n  \"ti-TI\": \"Tigrinya\",\r\n  \"tk-TM\": \"Turkmen\",\r\n  \"tl-PH\": \"Tagalog\",\r\n  \"tn-BW\": \"Tswana\",\r\n  \"to-TO\": \"Tongan\",\r\n  \"tr-TR\": \"Turkish\",\r\n  \"uk-UA\": \"Ukrainian\",\r\n  \"uz-UZ\": \"Uzbek\",\r\n  \"vi-VN\": \"Vietnamese\",\r\n  \"wo-SN\": \"Wolof\",\r\n  \"xh-ZA\": \"Xhosa\",\r\n  \"yi-YD\": \"Yiddish\",\r\n  \"zu-ZA\": \"Zulu\",\r\n};\r\n\r\nexport default languages;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport languages from './languages';\r\nimport { Select } from \"@chakra-ui/react\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n  const [language, setlanguage] = useState(\"en-GB\");\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic,language);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n          language,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"languageSelect\">\r\n        <FormLabel>Select Language</FormLabel>\r\n        <Select\r\n           value={language}\r\n           onChange={(e)=>setlanguage(e.target.value)}\r\n          placeholder=\"Select a language\"\r\n        >\r\n          {Object.entries(languages).map(([code, name]) => (\r\n            <option key={code} value={code}>\r\n              {name}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          CHAT-WAVE\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\nimport { Box, Heading } from \"@chakra-ui/react\";\r\nimport { Stack, Switch, Flex } from \"@chakra-ui/react\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";  \r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  \r\n  const {\r\n    toggle,\r\n    settoggle,\r\n  } = ChatState();\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <Box>\r\n       <Flex alignItems=\"center\">\r\n         <FormControl display=\"flex\" alignItems=\"center\">\r\n           <FormLabel htmlFor=\"translate-language\" mb=\"0\">\r\n             Translate Language\r\n           </FormLabel>\r\n           <Switch\r\n             id=\"translate-language\"\r\n             colorScheme=\"teal\"\r\n             isChecked={toggle}\r\n             onChange={() => settoggle(!toggle)}\r\n           />\r\n         </FormControl>\r\n         <IconButton\r\n           ml={4} // Increased margin left for more spacing\r\n           icon={<ViewIcon />}\r\n           onClick={onOpen}\r\n         />\r\n       </Flex>\r\n     </Box>\r\n       )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user, toggle } = ChatState();\r\n  const [translatedMessages, setTranslatedMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    translateMessages();\r\n  }, [messages, toggle]);\r\n\r\n  const translateMessage = async (content, m) => {\r\n    //  console.log(\"happening\");\r\n\r\n    console.log(m);\r\n\r\n\r\n    try {\r\n      const response = await axios.post(\"/translate\", {\r\n        q: content,\r\n        source: m.sender.language,\r\n        target: user.language,\r\n      });\r\n\r\n      console.log(response)\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Translation error:\", error);\r\n      return content; // Return original content if translation fails\r\n    }\r\n\r\n\r\n  };\r\n\r\n  const translateMessages = async () => {\r\n    const translated = await Promise.all(\r\n      messages.map(async (m) => {\r\n        if (toggle && m.sender._id !== user._id) {\r\n          // Translate message if toggle is true and sender is not current user\r\n          return {\r\n            ...m,\r\n            content: await translateMessage(m.content, m),\r\n          };\r\n        } else {\r\n          return m; // Return original message if no translation needed\r\n        }\r\n      })\r\n    );\r\n    setTranslatedMessages(translated);\r\n  };\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {translatedMessages &&\r\n        translatedMessages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(translatedMessages, m, i, user._id) ||\r\n              isLastMessage(translatedMessages, i, user._id)) && (\r\n                <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                  <Avatar\r\n                    mt=\"7px\"\r\n                    mr={1}\r\n                    size=\"sm\"\r\n                    cursor=\"pointer\"\r\n                    name={m.sender.name}\r\n                    src={m.sender.pic}\r\n                  />\r\n                </Tooltip>\r\n              )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                  }`,\r\n                marginLeft: isSameSenderMargin(\r\n                  translatedMessages,\r\n                  m,\r\n                  i,\r\n                  user._id\r\n                ),\r\n                marginTop: isSameUser(translatedMessages, m, i, user._id)\r\n                  ? 3\r\n                  : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}